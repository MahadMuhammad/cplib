#!/usr/bin/env python3
# Author: <Muhammad Mahad mahadtxt@gmail.com>

import argparse, os
from datetime import datetime


def read_template(file_path):
    with open(file_path, "r") as file:
        return file.read()


def generate_header(author, file_name, is_python=False):
    timestamp = datetime.now().strftime("%b-%d-%Y   %I:%M:%S %p")
    current_path = os.getcwd()
    cp_index = current_path.rfind("CP")
    if cp_index != -1:
        relative_path = current_path[cp_index:] + "/" + file_name
    else:
        relative_path = current_path

    if is_python:
        header = f"""\
\"\"\"
Author  : {author} | github.com/MahadMuhammad
Created : {timestamp}   {relative_path}
\"\"\"
"""
    else:
        header = f"""\
/**
 *  Author  : {author} | github.com/MahadMuhammad
 *  Created : {timestamp}   
 *  {relative_path}
 **/"""
    return header


def write_output(header, template_content, output_path):
    with open(output_path, "w") as file:
        file.write(header + "\n" + template_content)


def main():
    parser = argparse.ArgumentParser(
        description="Append dynamic header to a template file."
    )
    parser.add_argument(
        "input_file",
        nargs="?",
        default=os.path.expanduser("~/cplib/libs/cp_template.cpp"),
        help="Path to the input template file",
    )
    parser.add_argument(
        "-o",
        "--output_file",
        nargs="?",
        default="A.cpp",
        help="Path to the output file",
    )
    parser.add_argument(
        "--author", default="Mahad", help="Author name to include in the header"
    )
    parser.add_argument(
        "-p",
        "--python",
        action="store_true",
        help="Generate a Python file with a Python header comment",
    )

    args = parser.parse_args()

    # replace spaces with underscores in output file name
    args.output_file = args.output_file.replace(" ", "_")

    if args.python:
        if not args.output_file.endswith(".py"):
            args.output_file += ".py"
        args.input_file = os.path.expanduser("~/cplib/libs/cp_template.py")
    else:
        if not args.output_file.endswith(".cpp"):
            args.output_file += ".cpp"

    template_content = read_template(args.input_file)
    header = generate_header(args.author, args.output_file, is_python=args.python)
    write_output(header, template_content, args.output_file)


if __name__ == "__main__":
    main()
