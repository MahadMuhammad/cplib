#!/usr/bin/env python3
import os
import subprocess
import glob
import argparse

# Constants
PROBLEM_NAME = os.path.basename(os.getcwd())
DEBUG = True
LANG = "cpp"


def set_targets(name=None):
    global TARGET, EXECUTE, CLEAN_TARGETS
    if LANG == "cpp":
        TARGET = name if name else PROBLEM_NAME
        EXECUTE = f"./{TARGET}.out"
        CLEAN_TARGETS = [TARGET]
    elif LANG == "python":
        TARGET = f"{name}.py" if name else f"{PROBLEM_NAME}.py"
        EXECUTE = f"python3 ./{TARGET}"
        CLEAN_TARGETS = []
    else:
        raise ValueError(
            "Unknown language; please set TARGET, EXECUTE, and CLEAN_TARGETS manually"
        )


CXX = "g++"
CXXFLAGS = "-std=c++23 -Winvalid-pch -I/home/mahad/cplib/ -Wall -Wextra -pedantic -Wshadow -Wformat=2 -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wcast-qual -Wcast-align -Wunused -Wsign-conversion"
DEBUG_CXXFLAGS = "-fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fno-sanitize-recover=all -fstack-protector-all -D_FORTIFY_SOURCE=2 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -DMAHAD_DEBUG"

if DEBUG:
    CXXFLAGS += " " + DEBUG_CXXFLAGS


def compile_cpp():
    source_file = f"{TARGET}.cpp"
    target_file = f"{TARGET}.out"

    # Skip compilation if the target is up-to-date
    if os.path.exists(target_file) and os.path.getmtime(
        source_file
    ) <= os.path.getmtime(target_file):
        print(f"\033[92m{target_file} is up-to-date.\033[0m")
        return

    # Compile the source file
    msg = f"\033[91mCompiling {source_file} with c++23 "
    msg += "with DEBUG flags...\033[0m" if DEBUG else "...\033[0m"
    print(msg)
    command = f"{CXX} {CXXFLAGS} {source_file} -o {target_file}"
    subprocess.run(command, shell=True, check=True)


def clean():
    for target in CLEAN_TARGETS:
        if os.path.exists(f"{target}.out"):
            os.remove(f"{target}.out")
        elif os.path.exists(target):
            os.remove(target)


def clean_results():
    for res_file in glob.glob("*.result"):
        os.remove(res_file)


def veryclean():
    clean()
    for res_file in glob.glob("*.result"):
        os.remove(res_file)


def run(name=None):
    set_targets(name)
    if LANG == "cpp":
        compile_cpp()
    subprocess.run(f"time -p {EXECUTE}", shell=True)
    if DEBUG:
        print("Built with DEBUG flags enabled, code may be slower than normal")


def run_tests(name=None):
    set_targets(name)
    cases = sorted(glob.glob("*.in"))
    for case in cases:
        base = os.path.splitext(case)[0]
        res_file = f"{base}.result"
        with open(case, "r") as infile, open(res_file, "w") as outfile:
            subprocess.run(f"time {EXECUTE}", stdin=infile, stdout=outfile, shell=True)
        if DEBUG:
            print("Built with DEBUG flags enabled, code may be slower than normal")


def test(name=None):
    set_targets(name)
    cases = sorted(glob.glob("*.in"))
    outs = sorted(glob.glob("*.output"))
    tests = [os.path.splitext(case)[0] for case in cases]

    compile_cpp()
    clean_results()
    passed = 0
    failed = 0
    failed_cases = []  # <test_case_number, test_case_name, error_message>

    for i, test_case in enumerate(tests):
        print(f"\033[94m{30*'-'}\033[0m")
        print(f"Running test case {i} {test_case}...\n")
        subprocess.run(
            f"time -p {EXECUTE} < {test_case}.in > {test_case}.result",
            shell=True,
            text=True,
        )
        res_file = f"{test_case}.result"
        out_file = f"{test_case}.output"

        # if output file is empty, then inform the user
        if os.stat(res_file).st_size == 0:
            print(f"\033[91m{res_file} is empty -- Skipping\033[0m")
            failed += 1
            failed_cases.append((i, test_case, f"{res_file} is empty"))
            print(f"\033[94m{30*'-'}\033[0m")
            continue

        result = subprocess.run(
            f"diff --color=always {res_file} {out_file}",
            shell=True,
            text=True,
            capture_output=True,
        )
        if result.stdout == "":
            print(f"\033[92mTest case {i} {test_case} passed.\033[0m")
            passed += 1
        else:
            print(f"\033[91mTest case {i} {test_case} failed.\033[0m")
            failed_cases.append((i, test_case, result.stdout))
            failed += 1
        print(f"\033[94m{30*'-'}\033[0m")
    total = len(tests)
    try:
        assert total == passed + failed == len(outs) == len(cases)
    except AssertionError:
        print(
            f"\033[91mSanity check failed: total={total}, passed+failed={passed + failed}, len(outs)={len(outs)}, len(cases)={len(cases)}\033[0m"
        )

    print(f"\033[94m{40*'-'}\033[0m")
    print(f"\n\033[94m\t\tTest Summary:\033[0m")
    print(f"\tTotal: {total}, Passed: {passed}, Failed: {failed}")
    if failed == 0:
        print("\tVERDICT: PASSED")
        print("\033[92m\tAll test cases passed!\033[0m")
        print(f"\033[94m{40*'-'}\033[0m")
    else:
        print("\tVERDICT: FAILED")
        print(f"\033[94m{40*'-'}\033[0m")
        print(f"\033[91m{20*'-'}\033[0m\n", end="")
        for number, case, error in failed_cases:
            print(f"\033[91mTest case {number} {case} failed with diff:\033[0m")
            print(error)
        print(f"\033[91m{20*'-'}\033[0m")


def main():
    parser = argparse.ArgumentParser(description="Build and test automation script")
    parser.add_argument(
        "command",
        choices=["clean", "veryclean", "run", "test"],
        help="Command to execute",
    )
    parser.add_argument(
        "name",
        nargs="?",
        help="Optional name for the target",
    )
    args = parser.parse_args()

    command = args.command
    name = args.name
    print(f"Running command: {command} with name: {name}")
    if command == "clean":
        clean()
    elif command == "veryclean":
        veryclean()
    elif command == "run":
        run(name)
    elif command == "test":
        test(name)


if __name__ == "__main__":
    main()
